From 9aeea0ec8cf62e290018e3f54cfbee3cdbd2a020 Mon Sep 17 00:00:00 2001
From: taylorlampe-wr <taylor.lampe@workrise.com>
Date: Tue, 22 Jul 2025 19:23:00 -0700
Subject: [PATCH] Add comprehensive MUI-inspired design system
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Created 11 components: Button, TextField, Card, Avatar, Badge, Alert, IconButton, Switch, Checkbox, Typography, Divider
- All components use existing design tokens from globals.css
- Fully typed TypeScript interfaces with comprehensive props
- CSS Modules with dark theme support
- Updated navigation with organized component sections
- Added CLAUDE.md for future development guidance
- Fixed hostname binding issue in dev script

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
---
 CLAUDE.md                                    |  73 +++++
 app/components/display/Avatar.module.css     |  80 ++++++
 app/components/display/Avatar.tsx            | 100 +++++++
 app/components/display/Badge.module.css      | 119 ++++++++
 app/components/display/Badge.tsx             | 107 ++++++++
 app/components/display/Typography.module.css | 135 ++++++++++
 app/components/display/Typography.tsx        |  84 ++++++
 app/components/feedback/Alert.module.css     | 208 ++++++++++++++
 app/components/feedback/Alert.tsx            | 131 +++++++++
 app/components/inputs/Button.module.css      | 263 ++++++++++++++++++
 app/components/inputs/Button.tsx             |  93 +++++++
 app/components/inputs/Checkbox.module.css    | 239 ++++++++++++++++
 app/components/inputs/Checkbox.tsx           |  96 +++++++
 app/components/inputs/IconButton.module.css  | 152 +++++++++++
 app/components/inputs/IconButton.tsx         |  64 +++++
 app/components/inputs/Switch.module.css      | 215 +++++++++++++++
 app/components/inputs/Switch.tsx             |  72 +++++
 app/components/inputs/TextField.module.css   | 270 +++++++++++++++++++
 app/components/inputs/TextField.tsx          | 149 ++++++++++
 app/components/layout/Card.module.css        | 158 +++++++++++
 app/components/layout/Card.tsx               | 166 ++++++++++++
 app/components/layout/Divider.module.css     | 128 +++++++++
 app/components/layout/Divider.tsx            |  84 ++++++
 app/components/navigation/SideNav.tsx        |  26 ++
 app/inputs/button/page.module.css            |  24 ++
 app/inputs/button/page.tsx                   | 107 ++++++++
 app/page.tsx                                 |   9 +-
 package.json                                 |   2 +-
 28 files changed, 3350 insertions(+), 4 deletions(-)
 create mode 100644 CLAUDE.md
 create mode 100644 app/components/display/Avatar.module.css
 create mode 100644 app/components/display/Avatar.tsx
 create mode 100644 app/components/display/Badge.module.css
 create mode 100644 app/components/display/Badge.tsx
 create mode 100644 app/components/display/Typography.module.css
 create mode 100644 app/components/display/Typography.tsx
 create mode 100644 app/components/feedback/Alert.module.css
 create mode 100644 app/components/feedback/Alert.tsx
 create mode 100644 app/components/inputs/Button.module.css
 create mode 100644 app/components/inputs/Button.tsx
 create mode 100644 app/components/inputs/Checkbox.module.css
 create mode 100644 app/components/inputs/Checkbox.tsx
 create mode 100644 app/components/inputs/IconButton.module.css
 create mode 100644 app/components/inputs/IconButton.tsx
 create mode 100644 app/components/inputs/Switch.module.css
 create mode 100644 app/components/inputs/Switch.tsx
 create mode 100644 app/components/inputs/TextField.module.css
 create mode 100644 app/components/inputs/TextField.tsx
 create mode 100644 app/components/layout/Card.module.css
 create mode 100644 app/components/layout/Card.tsx
 create mode 100644 app/components/layout/Divider.module.css
 create mode 100644 app/components/layout/Divider.tsx
 create mode 100644 app/inputs/button/page.module.css
 create mode 100644 app/inputs/button/page.tsx

diff --git a/CLAUDE.md b/CLAUDE.md
new file mode 100644
index 0000000..02a9795
--- /dev/null
+++ b/CLAUDE.md
@@ -0,0 +1,73 @@
+# CLAUDE.md
+
+This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
+
+## Development Commands
+
+- `npm run dev` - Start development server
+- `npm run build` - Build for production
+- `npm start` - Start production server  
+- `npm run lint` - Run ESLint for code quality
+
+## Project Architecture
+
+This is a Next.js-based design system documentation site using:
+- **Next.js 14** with App Router (no src/ folder - all code in app/)
+- **TypeScript** for type safety
+- **CSS Modules** for component styling
+- **Design token system** via CSS variables in globals.css
+
+### Design Token System
+
+The project has a comprehensive design token system in `app/globals.css:1-459`:
+- **Color primitives**: Blues, neutrals, teals, greens, reds, yellows, etc.
+- **Semantic colors**: Background, text, action, alert, tooltip tokens
+- **Dark theme support**: Via `[data-theme="dark"]` attribute
+- **Spacing system**: 4px grid system (--space-4 to --space-48)
+- **Border radius**: From square (0px) to pill (999px)
+- **Typography**: Complete font size, line height, and weight system
+- **Utility classes**: For consistent typography across components
+
+### Component Architecture
+
+Components follow this pattern:
+- Located in `app/components/` organized by category (inputs, navigation)
+- Each component has TypeScript interface with comprehensive props
+- CSS Modules for styling with design token references
+- Well-documented props with JSDoc comments
+
+Example: `Chip` component at `app/components/inputs/Chip.tsx:1-138` shows:
+- Comprehensive prop interface with variants, sizes, states
+- Event handling for clicks and deletion
+- Proper accessibility (role, tabIndex)
+- Modular CSS class composition
+
+### Navigation Structure
+
+The site uses a sidebar navigation system (`app/components/navigation/SideNav.tsx:1-53`) with:
+- Sectioned navigation (Foundations, Inputs, etc.)
+- Dynamic routing via Next.js Link components
+- Structured navigation data for easy expansion
+
+## Design System Implementation Rules
+
+### Component Creation Process
+1. Extract design tokens first and add to `app/globals.css`
+2. Build components using existing CSS variables
+3. Follow existing patterns for props, styling, and documentation
+4. Add components to navigation in `SideNav.tsx`
+
+### Styling Guidelines  
+- Use CSS Modules exclusively for component styles
+- Reference design tokens via CSS variables (e.g., `var(--action-primary)`)
+- Follow existing naming conventions for CSS classes
+- Maintain consistency with spacing, typography, and color systems
+
+### Code Editing Workflow
+When making changes:
+- Scope changes to specific files/lines mentioned
+- Show implementation plan before making changes
+- Wait for "ACK" confirmation before proceeding
+- Prefer extending existing patterns over creating new ones
+- Never introduce breaking changes without approval
+- Reuse existing components and design tokens wherever possible
\ No newline at end of file
diff --git a/app/components/display/Avatar.module.css b/app/components/display/Avatar.module.css
new file mode 100644
index 0000000..2d7edf8
--- /dev/null
+++ b/app/components/display/Avatar.module.css
@@ -0,0 +1,80 @@
+/* Avatar Base Styles */
+.root {
+  position: relative;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  flex-shrink: 0;
+  width: 40px;
+  height: 40px;
+  font-family: var(--font-primary);
+  font-size: var(--font-size-avatar-initials);
+  line-height: var(--line-height-avatar-initials);
+  font-weight: var(--font-weight-regular);
+  border-radius: 50%;
+  overflow: hidden;
+  user-select: none;
+  background-color: var(--neutral-300);
+  color: var(--text-primary);
+}
+
+/* Size Variants */
+.small {
+  width: 32px;
+  height: 32px;
+  font-size: 14px;
+}
+
+.medium {
+  width: 40px;
+  height: 40px;
+  font-size: var(--font-size-avatar-initials);
+}
+
+.large {
+  width: 56px;
+  height: 56px;
+  font-size: 20px;
+}
+
+/* Shape Variants */
+.circular {
+  border-radius: 50%;
+}
+
+.rounded {
+  border-radius: var(--radius-8);
+}
+
+.square {
+  border-radius: 0;
+}
+
+/* Image */
+.img {
+  width: 100%;
+  height: 100%;
+  text-align: center;
+  object-fit: cover;
+  color: transparent;
+  text-indent: 10000px;
+}
+
+/* Fallback Content */
+.fallback {
+  width: 75%;
+  height: 75%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-size: inherit;
+  line-height: inherit;
+  font-weight: inherit;
+  color: inherit;
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .root {
+  background-color: var(--neutral-600);
+  color: var(--white);
+}
\ No newline at end of file
diff --git a/app/components/display/Avatar.tsx b/app/components/display/Avatar.tsx
new file mode 100644
index 0000000..59bc19b
--- /dev/null
+++ b/app/components/display/Avatar.tsx
@@ -0,0 +1,100 @@
+'use client';
+
+import { ReactNode, HTMLAttributes, useState } from 'react';
+import styles from './Avatar.module.css';
+
+export interface AvatarProps extends HTMLAttributes<HTMLDivElement> {
+  /**
+   * Used to render icon or text elements inside the Avatar if src is not set.
+   * This can be an element, or just a string.
+   */
+  children?: ReactNode;
+  
+  /**
+   * The src attribute for the img element.
+   */
+  src?: string;
+  
+  /**
+   * The alt attribute for the img element.
+   */
+  alt?: string;
+  
+  /**
+   * The size of the avatar
+   * @default "medium"
+   */
+  size?: 'small' | 'medium' | 'large';
+  
+  /**
+   * The variant of the avatar
+   * @default "circular"
+   */
+  variant?: 'circular' | 'rounded' | 'square';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Avatar = ({
+  children,
+  src,
+  alt = '',
+  size = 'medium',
+  variant = 'circular',
+  className,
+  ...props
+}: AvatarProps) => {
+  const [imgError, setImgError] = useState(false);
+  const [imgLoaded, setImgLoaded] = useState(false);
+
+  const handleImgError = () => {
+    setImgError(true);
+  };
+
+  const handleImgLoad = () => {
+    setImgLoaded(true);
+  };
+
+  const rootClasses = [
+    styles.root,
+    styles[size],
+    styles[variant],
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  const hasImg = src && !imgError;
+  const hasImgNotFailing = hasImg && imgLoaded;
+
+  return (
+    <div className={rootClasses} {...props}>
+      {hasImg && (
+        <img
+          alt={alt}
+          src={src}
+          className={styles.img}
+          onError={handleImgError}
+          onLoad={handleImgLoad}
+        />
+      )}
+      {!hasImgNotFailing && children && (
+        <div className={styles.fallback}>
+          {typeof children === 'string' ? getInitials(children) : children}
+        </div>
+      )}
+    </div>
+  );
+};
+
+// Helper function to get initials from a name
+function getInitials(name: string): string {
+  const names = name.trim().split(' ');
+  if (names.length === 1) {
+    return names[0].charAt(0).toUpperCase();
+  }
+  return (names[0].charAt(0) + names[names.length - 1].charAt(0)).toUpperCase();
+}
\ No newline at end of file
diff --git a/app/components/display/Badge.module.css b/app/components/display/Badge.module.css
new file mode 100644
index 0000000..4e255fc
--- /dev/null
+++ b/app/components/display/Badge.module.css
@@ -0,0 +1,119 @@
+/* Badge Base Styles */
+.root {
+  position: relative;
+  display: inline-flex;
+  vertical-align: middle;
+  flex-shrink: 0;
+}
+
+.badge {
+  display: flex;
+  flex-direction: row;
+  flex-wrap: wrap;
+  justify-content: center;
+  align-content: center;
+  align-items: center;
+  position: absolute;
+  box-sizing: border-box;
+  font-family: var(--font-primary);
+  font-weight: var(--font-weight-medium);
+  font-size: var(--font-size-badge-label);
+  line-height: var(--line-height-badge-label);
+  min-width: 20px;
+  border-radius: var(--radius-pill);
+  z-index: 1;
+  transition: transform 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+}
+
+/* Standard Variant */
+.standard {
+  height: 20px;
+  padding: 0 var(--space-8);
+}
+
+/* Dot Variant */
+.dot {
+  min-width: 8px;
+  height: 8px;
+  border-radius: 50%;
+  padding: 0;
+}
+
+/* Color Variants */
+.default {
+  background-color: var(--neutral-500);
+  color: var(--white);
+}
+
+.primary {
+  background-color: var(--action-primary);
+  color: var(--action-on-background);
+}
+
+.secondary {
+  background-color: var(--neutral-600);
+  color: var(--white);
+}
+
+.error {
+  background-color: var(--action-destructive);
+  color: var(--action-on-background);
+}
+
+.info {
+  background-color: var(--blue-600);
+  color: var(--action-on-background);
+}
+
+.success {
+  background-color: var(--green-600);
+  color: var(--action-on-background);
+}
+
+.warning {
+  background-color: var(--yellow-600);
+  color: var(--neutral-800);
+}
+
+/* Position Variants */
+.topRight {
+  top: 0;
+  right: 0;
+  transform: scale(1) translate(50%, -50%);
+  transform-origin: 100% 0%;
+}
+
+.topLeft {
+  top: 0;
+  left: 0;
+  transform: scale(1) translate(-50%, -50%);
+  transform-origin: 0% 0%;
+}
+
+.bottomRight {
+  bottom: 0;
+  right: 0;
+  transform: scale(1) translate(50%, 50%);
+  transform-origin: 100% 100%;
+}
+
+.bottomLeft {
+  bottom: 0;
+  left: 0;
+  transform: scale(1) translate(-50%, 50%);
+  transform-origin: 0% 100%;
+}
+
+/* Invisible State */
+.invisible {
+  transform: scale(0);
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .default {
+  background-color: var(--neutral-400);
+}
+
+[data-theme="dark"] .secondary {
+  background-color: var(--neutral-500);
+}
\ No newline at end of file
diff --git a/app/components/display/Badge.tsx b/app/components/display/Badge.tsx
new file mode 100644
index 0000000..278b023
--- /dev/null
+++ b/app/components/display/Badge.tsx
@@ -0,0 +1,107 @@
+'use client';
+
+import { ReactNode, HTMLAttributes } from 'react';
+import styles from './Badge.module.css';
+
+export interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {
+  /**
+   * The content rendered within the badge.
+   */
+  badgeContent?: ReactNode;
+  
+  /**
+   * The badge will be added relative to this node.
+   */
+  children: ReactNode;
+  
+  /**
+   * The color of the component.
+   * @default "default"
+   */
+  color?: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';
+  
+  /**
+   * If true, the badge is invisible.
+   * @default false
+   */
+  invisible?: boolean;
+  
+  /**
+   * Max count to show.
+   * @default 99
+   */
+  max?: number;
+  
+  /**
+   * Controls whether the badge is hidden when badgeContent is zero.
+   * @default false
+   */
+  showZero?: boolean;
+  
+  /**
+   * The variant to use.
+   * @default "standard"
+   */
+  variant?: 'standard' | 'dot';
+  
+  /**
+   * The anchor origin.
+   * @default { vertical: 'top', horizontal: 'right' }
+   */
+  anchorOrigin?: {
+    vertical: 'top' | 'bottom';
+    horizontal: 'left' | 'right';
+  };
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Badge = ({
+  badgeContent,
+  children,
+  color = 'default',
+  invisible = false,
+  max = 99,
+  showZero = false,
+  variant = 'standard',
+  anchorOrigin = { vertical: 'top', horizontal: 'right' },
+  className,
+  ...props
+}: BadgeProps) => {
+  let displayValue: ReactNode = badgeContent;
+
+  // Handle numeric badge content
+  if (typeof badgeContent === 'number') {
+    displayValue = badgeContent > max ? `${max}+` : badgeContent;
+  }
+
+  // Determine if badge should be visible
+  const showBadge = !invisible && (
+    (variant === 'dot') ||
+    (badgeContent !== undefined && badgeContent !== null && (showZero || badgeContent !== 0))
+  );
+
+  const badgeClasses = [
+    styles.badge,
+    styles[variant],
+    styles[color],
+    styles[`${anchorOrigin.vertical}${anchorOrigin.horizontal.charAt(0).toUpperCase()}${anchorOrigin.horizontal.slice(1)}`],
+    !showBadge && styles.invisible,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  const rootClasses = [styles.root, className].filter(Boolean).join(' ');
+
+  return (
+    <span className={rootClasses} {...props}>
+      {children}
+      <span className={badgeClasses}>
+        {variant === 'standard' && displayValue}
+      </span>
+    </span>
+  );
+};
\ No newline at end of file
diff --git a/app/components/display/Typography.module.css b/app/components/display/Typography.module.css
new file mode 100644
index 0000000..c6dd583
--- /dev/null
+++ b/app/components/display/Typography.module.css
@@ -0,0 +1,135 @@
+/* Typography Base Styles */
+.root {
+  margin: 0;
+  font-family: var(--font-primary);
+  font-weight: var(--font-weight-regular);
+  font-size: var(--font-size-body1);
+  line-height: var(--line-height-body1);
+  letter-spacing: 0.00938em;
+}
+
+/* Typography Variants */
+.h1 {
+  font-size: var(--font-size-h1);
+  line-height: var(--line-height-h1);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: -0.01562em;
+}
+
+.h2 {
+  font-size: var(--font-size-h2);
+  line-height: var(--line-height-h2);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: -0.00833em;
+}
+
+.h3 {
+  font-size: var(--font-size-h3);
+  line-height: var(--line-height-h3);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: 0em;
+}
+
+.h4 {
+  font-size: var(--font-size-h4);
+  line-height: var(--line-height-h4);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: 0.00735em;
+}
+
+.h5 {
+  font-size: var(--font-size-h5);
+  line-height: var(--line-height-h5);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: 0em;
+}
+
+.h6 {
+  font-size: var(--font-size-h6);
+  line-height: var(--line-height-h6);
+  font-weight: var(--font-weight-bold);
+  letter-spacing: 0.0075em;
+}
+
+.subtitle1 {
+  font-size: var(--font-size-subtitle1);
+  line-height: var(--line-height-subtitle1);
+  font-weight: var(--font-weight-semibold);
+  letter-spacing: 0.00938em;
+}
+
+.subtitle2 {
+  font-size: var(--font-size-subtitle2);
+  line-height: var(--line-height-subtitle2);
+  font-weight: var(--font-weight-semibold);
+  letter-spacing: 0.00714em;
+}
+
+.body1 {
+  font-size: var(--font-size-body1);
+  line-height: var(--line-height-body1);
+  font-weight: var(--font-weight-regular);
+  letter-spacing: 0.00938em;
+}
+
+.body2 {
+  font-size: var(--font-size-body2);
+  line-height: var(--line-height-body2);
+  font-weight: var(--font-weight-regular);
+  letter-spacing: 0.01071em;
+}
+
+.caption {
+  font-size: var(--font-size-caption);
+  line-height: var(--line-height-caption);
+  font-weight: var(--font-weight-regular);
+  letter-spacing: 0.03333em;
+}
+
+.button {
+  font-size: var(--font-size-button-medium);
+  line-height: var(--line-height-button-medium);
+  font-weight: var(--font-weight-semibold);
+  letter-spacing: 0.02857em;
+  text-transform: uppercase;
+}
+
+.overline {
+  font-size: var(--font-size-overline);
+  line-height: var(--line-height-overline);
+  font-weight: var(--font-weight-regular);
+  letter-spacing: 0.08333em;
+  text-transform: uppercase;
+}
+
+/* Color Variants */
+.inherit {
+  color: inherit;
+}
+
+.primary {
+  color: var(--action-primary);
+}
+
+.secondary {
+  color: var(--text-secondary);
+}
+
+.textPrimary {
+  color: var(--text-primary);
+}
+
+.textSecondary {
+  color: var(--text-secondary);
+}
+
+.error {
+  color: var(--action-destructive);
+}
+
+/* No Wrap */
+.noWrap {
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+}
\ No newline at end of file
diff --git a/app/components/display/Typography.tsx b/app/components/display/Typography.tsx
new file mode 100644
index 0000000..362bae9
--- /dev/null
+++ b/app/components/display/Typography.tsx
@@ -0,0 +1,84 @@
+'use client';
+
+import { ReactNode, ElementType, HTMLAttributes } from 'react';
+import styles from './Typography.module.css';
+
+export interface TypographyProps extends HTMLAttributes<HTMLElement> {
+  /**
+   * The content of the component.
+   */
+  children?: ReactNode;
+  
+  /**
+   * The component used for the root node.
+   * Either a string to use a HTML element or a component.
+   */
+  component?: ElementType;
+  
+  /**
+   * The color of the component.
+   * @default "textPrimary"
+   */
+  color?: 'inherit' | 'primary' | 'secondary' | 'textPrimary' | 'textSecondary' | 'error';
+  
+  /**
+   * If true, the text will not wrap, but instead will truncate with a text overflow ellipsis.
+   * @default false
+   */
+  noWrap?: boolean;
+  
+  /**
+   * Applies the theme typography styles.
+   * @default "body1"
+   */
+  variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'subtitle1' | 'subtitle2' | 'body1' | 'body2' | 'caption' | 'button' | 'overline';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+const variantMapping: Record<string, ElementType> = {
+  h1: 'h1',
+  h2: 'h2',
+  h3: 'h3',
+  h4: 'h4',
+  h5: 'h5',
+  h6: 'h6',
+  subtitle1: 'h6',
+  subtitle2: 'h6',
+  body1: 'p',
+  body2: 'p',
+  caption: 'span',
+  button: 'span',
+  overline: 'span',
+};
+
+export const Typography = ({
+  children,
+  component,
+  color = 'textPrimary',
+  noWrap = false,
+  variant = 'body1',
+  className,
+  ...props
+}: TypographyProps) => {
+  const Component = component || variantMapping[variant] || 'span';
+  
+  const rootClasses = [
+    styles.root,
+    styles[variant],
+    styles[color],
+    noWrap && styles.noWrap,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <Component className={rootClasses} {...props}>
+      {children}
+    </Component>
+  );
+};
\ No newline at end of file
diff --git a/app/components/feedback/Alert.module.css b/app/components/feedback/Alert.module.css
new file mode 100644
index 0000000..682c89c
--- /dev/null
+++ b/app/components/feedback/Alert.module.css
@@ -0,0 +1,208 @@
+/* Alert Base Styles */
+.root {
+  font-family: var(--font-primary);
+  font-size: var(--font-size-body2);
+  line-height: var(--line-height-body2);
+  font-weight: var(--font-weight-regular);
+  border-radius: var(--radius-8);
+  padding: var(--space-8) var(--space-16);
+  display: flex;
+  align-items: flex-start;
+  gap: var(--space-12);
+}
+
+/* Message */
+.message {
+  flex: 1;
+  min-width: 0;
+  padding: var(--space-4) 0;
+}
+
+/* Icon */
+.icon {
+  display: flex;
+  opacity: 0.9;
+  padding: var(--space-4) 0;
+  flex-shrink: 0;
+}
+
+/* Action */
+.action {
+  display: flex;
+  align-items: flex-start;
+  padding: var(--space-4) 0 var(--space-4) var(--space-16);
+  margin-left: auto;
+  margin-right: calc(var(--space-4) * -1);
+}
+
+/* Close Button */
+.closeButton {
+  background-color: transparent;
+  overflow: visible;
+  border: 0;
+  margin: 0;
+  cursor: pointer;
+  user-select: none;
+  vertical-align: middle;
+  outline: 0;
+  text-decoration: none;
+  color: inherit;
+  padding: var(--space-4);
+  border-radius: var(--radius-8);
+  margin-right: calc(var(--space-8) * -1);
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  opacity: 0.54;
+  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+}
+
+.closeButton:hover {
+  opacity: 1;
+}
+
+.closeButton:focus-visible {
+  outline: 2px solid currentColor;
+  outline-offset: 2px;
+}
+
+/* Standard Variant */
+.standard.success {
+  color: var(--green-800);
+  background-color: var(--alert-success-background);
+}
+
+.standard.success .icon {
+  color: var(--alert-success-icon);
+}
+
+.standard.info {
+  color: var(--blue-800);
+  background-color: var(--alert-info-background);
+}
+
+.standard.info .icon {
+  color: var(--alert-info-icon);
+}
+
+.standard.warning {
+  color: var(--yellow-800);
+  background-color: var(--alert-warning-background);
+}
+
+.standard.warning .icon {
+  color: var(--alert-warning-icon);
+}
+
+.standard.error {
+  color: var(--red-800);
+  background-color: var(--alert-error-background);
+}
+
+.standard.error .icon {
+  color: var(--alert-error-icon);
+}
+
+/* Filled Variant */
+.filled.success {
+  background-color: var(--green-600);
+  color: var(--white);
+}
+
+.filled.info {
+  background-color: var(--blue-600);
+  color: var(--white);
+}
+
+.filled.warning {
+  background-color: var(--yellow-600);
+  color: var(--neutral-800);
+}
+
+.filled.error {
+  background-color: var(--red-600);
+  color: var(--white);
+}
+
+/* Outlined Variant */
+.outlined {
+  border: 1px solid;
+  background-color: transparent;
+}
+
+.outlined.success {
+  color: var(--green-800);
+  border-color: var(--green-600);
+}
+
+.outlined.success .icon {
+  color: var(--green-600);
+}
+
+.outlined.info {
+  color: var(--blue-800);
+  border-color: var(--blue-600);
+}
+
+.outlined.info .icon {
+  color: var(--blue-600);
+}
+
+.outlined.warning {
+  color: var(--yellow-800);
+  border-color: var(--yellow-600);
+}
+
+.outlined.warning .icon {
+  color: var(--yellow-600);
+}
+
+.outlined.error {
+  color: var(--red-800);
+  border-color: var(--red-600);
+}
+
+.outlined.error .icon {
+  color: var(--red-600);
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .standard.success {
+  color: var(--green-200);
+  background-color: var(--alert-success-background);
+}
+
+[data-theme="dark"] .standard.info {
+  color: var(--blue-200);
+  background-color: var(--alert-info-background);
+}
+
+[data-theme="dark"] .standard.warning {
+  color: var(--yellow-200);
+  background-color: var(--alert-warning-background);
+}
+
+[data-theme="dark"] .standard.error {
+  color: var(--red-200);
+  background-color: var(--alert-error-background);
+}
+
+[data-theme="dark"] .outlined.success {
+  color: var(--green-200);
+  border-color: var(--green-400);
+}
+
+[data-theme="dark"] .outlined.info {
+  color: var(--blue-200);
+  border-color: var(--blue-400);
+}
+
+[data-theme="dark"] .outlined.warning {
+  color: var(--yellow-200);
+  border-color: var(--yellow-400);
+}
+
+[data-theme="dark"] .outlined.error {
+  color: var(--red-200);
+  border-color: var(--red-400);
+}
\ No newline at end of file
diff --git a/app/components/feedback/Alert.tsx b/app/components/feedback/Alert.tsx
new file mode 100644
index 0000000..28314c0
--- /dev/null
+++ b/app/components/feedback/Alert.tsx
@@ -0,0 +1,131 @@
+'use client';
+
+import { ReactNode, HTMLAttributes } from 'react';
+import styles from './Alert.module.css';
+
+export interface AlertProps extends HTMLAttributes<HTMLDivElement> {
+  /**
+   * The content of the component.
+   */
+  children?: ReactNode;
+  
+  /**
+   * The action to display. It renders after the message, at the end of the alert.
+   */
+  action?: ReactNode;
+  
+  /**
+   * Override the icon displayed before the children.
+   * Unless provided, the icon is mapped to the value of the severity prop.
+   */
+  icon?: ReactNode;
+  
+  /**
+   * Callback fired when the close icon is clicked.
+   */
+  onClose?: () => void;
+  
+  /**
+   * The severity of the alert. This defines the color and icon used.
+   * @default "info"
+   */
+  severity?: 'error' | 'info' | 'success' | 'warning';
+  
+  /**
+   * The variant to use.
+   * @default "standard"
+   */
+  variant?: 'standard' | 'filled' | 'outlined';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+const defaultIcons = {
+  success: (
+    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+      <path
+        d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM8 15L3 10L4.41 8.59L8 12.17L15.59 4.58L17 6L8 15Z"
+        fill="currentColor"
+      />
+    </svg>
+  ),
+  info: (
+    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+      <path
+        d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V9H11V15ZM11 7H9V5H11V7Z"
+        fill="currentColor"
+      />
+    </svg>
+  ),
+  warning: (
+    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+      <path
+        d="M1 19H19L10 1L1 19ZM11 16H9V14H11V16ZM11 12H9V8H11V12Z"
+        fill="currentColor"
+      />
+    </svg>
+  ),
+  error: (
+    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+      <path
+        d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z"
+        fill="currentColor"
+      />
+    </svg>
+  ),
+};
+
+const CloseIcon = () => (
+  <svg width="18" height="18" viewBox="0 0 18 18" fill="none">
+    <path
+      d="M14.25 4.81L13.19 3.75L9 7.94L4.81 3.75L3.75 4.81L7.94 9L3.75 13.19L4.81 14.25L9 10.06L13.19 14.25L14.25 13.19L10.06 9L14.25 4.81Z"
+      fill="currentColor"
+    />
+  </svg>
+);
+
+export const Alert = ({
+  children,
+  action,
+  icon,
+  onClose,
+  severity = 'info',
+  variant = 'standard',
+  className,
+  ...props
+}: AlertProps) => {
+  const rootClasses = [
+    styles.root,
+    styles[variant],
+    styles[severity],
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  const displayIcon = icon !== false ? (icon || defaultIcons[severity]) : null;
+
+  return (
+    <div className={rootClasses} role="alert" {...props}>
+      {displayIcon && <div className={styles.icon}>{displayIcon}</div>}
+      
+      <div className={styles.message}>{children}</div>
+      
+      {action && <div className={styles.action}>{action}</div>}
+      
+      {onClose && (
+        <button
+          className={styles.closeButton}
+          onClick={onClose}
+          aria-label="Close"
+          type="button"
+        >
+          <CloseIcon />
+        </button>
+      )}
+    </div>
+  );
+};
\ No newline at end of file
diff --git a/app/components/inputs/Button.module.css b/app/components/inputs/Button.module.css
new file mode 100644
index 0000000..a001bde
--- /dev/null
+++ b/app/components/inputs/Button.module.css
@@ -0,0 +1,263 @@
+/* Button Base Styles */
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  position: relative;
+  box-sizing: border-box;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  cursor: pointer;
+  user-select: none;
+  vertical-align: middle;
+  text-decoration: none;
+  font-family: var(--font-primary);
+  font-weight: var(--font-weight-semibold);
+  border-radius: var(--radius-8);
+  transition: all 0.2s ease-in-out;
+  text-transform: none;
+  min-width: 64px;
+  padding: 0 var(--space-16);
+  gap: var(--space-8);
+}
+
+.root:focus-visible {
+  outline: 2px solid var(--action-primary);
+  outline-offset: 2px;
+}
+
+/* Size Variants */
+.small {
+  font-size: var(--font-size-button-small);
+  line-height: var(--line-height-button-small);
+  padding: var(--space-4) var(--space-12);
+  min-height: 32px;
+}
+
+.medium {
+  font-size: var(--font-size-button-medium);
+  line-height: var(--line-height-button-medium);
+  padding: var(--space-8) var(--space-16);
+  min-height: 40px;
+}
+
+.large {
+  font-size: var(--font-size-button-large);
+  line-height: var(--line-height-button-large);
+  padding: var(--space-12) var(--space-24);
+  min-height: 48px;
+}
+
+/* Contained Variants */
+.contained.primary {
+  background-color: var(--action-primary);
+  color: var(--action-on-background);
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.contained.primary:hover:not(.disabled) {
+  background-color: var(--action-primary-hover);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+.contained.secondary {
+  background-color: var(--neutral-200);
+  color: var(--text-primary);
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.contained.secondary:hover:not(.disabled) {
+  background-color: var(--neutral-300);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+.contained.error {
+  background-color: var(--action-destructive);
+  color: var(--action-on-background);
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.contained.error:hover:not(.disabled) {
+  background-color: var(--action-destructive-hover);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+.contained.success {
+  background-color: var(--green-600);
+  color: var(--action-on-background);
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.contained.success:hover:not(.disabled) {
+  background-color: var(--green-800);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+.contained.warning {
+  background-color: var(--yellow-600);
+  color: var(--neutral-800);
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.contained.warning:hover:not(.disabled) {
+  background-color: var(--yellow-800);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+/* Outlined Variants */
+.outlined {
+  background-color: transparent;
+  border: 1px solid;
+}
+
+.outlined.primary {
+  border-color: var(--action-primary);
+  color: var(--action-primary);
+}
+
+.outlined.primary:hover:not(.disabled) {
+  background-color: var(--blue-200);
+  border-color: var(--action-primary-hover);
+  color: var(--action-primary-hover);
+}
+
+.outlined.secondary {
+  border-color: var(--border-divider);
+  color: var(--text-primary);
+}
+
+.outlined.secondary:hover:not(.disabled) {
+  background-color: var(--neutral-100);
+  border-color: var(--neutral-300);
+}
+
+.outlined.error {
+  border-color: var(--action-destructive);
+  color: var(--action-destructive);
+}
+
+.outlined.error:hover:not(.disabled) {
+  background-color: var(--red-200);
+  border-color: var(--action-destructive-hover);
+  color: var(--action-destructive-hover);
+}
+
+.outlined.success {
+  border-color: var(--green-600);
+  color: var(--green-600);
+}
+
+.outlined.success:hover:not(.disabled) {
+  background-color: var(--green-200);
+  border-color: var(--green-800);
+  color: var(--green-800);
+}
+
+.outlined.warning {
+  border-color: var(--yellow-600);
+  color: var(--yellow-800);
+}
+
+.outlined.warning:hover:not(.disabled) {
+  background-color: var(--yellow-200);
+  border-color: var(--yellow-800);
+  color: var(--yellow-800);
+}
+
+/* Text Variants */
+.text {
+  background-color: transparent;
+  padding: var(--space-8) var(--space-12);
+}
+
+.text.primary {
+  color: var(--action-primary);
+}
+
+.text.primary:hover:not(.disabled) {
+  background-color: var(--blue-200);
+  color: var(--action-primary-hover);
+}
+
+.text.secondary {
+  color: var(--text-primary);
+}
+
+.text.secondary:hover:not(.disabled) {
+  background-color: var(--neutral-100);
+}
+
+.text.error {
+  color: var(--action-destructive);
+}
+
+.text.error:hover:not(.disabled) {
+  background-color: var(--red-200);
+  color: var(--action-destructive-hover);
+}
+
+.text.success {
+  color: var(--green-600);
+}
+
+.text.success:hover:not(.disabled) {
+  background-color: var(--green-200);
+  color: var(--green-800);
+}
+
+.text.warning {
+  color: var(--yellow-800);
+}
+
+.text.warning:hover:not(.disabled) {
+  background-color: var(--yellow-200);
+  color: var(--yellow-800);
+}
+
+/* Disabled State */
+.disabled {
+  cursor: not-allowed;
+  opacity: 0.6;
+  pointer-events: none;
+}
+
+.contained.disabled {
+  background-color: var(--action-disabled);
+  color: var(--text-disabled);
+  box-shadow: none;
+}
+
+.outlined.disabled {
+  border-color: var(--action-disabled);
+  color: var(--text-disabled);
+}
+
+.text.disabled {
+  color: var(--text-disabled);
+}
+
+/* Full Width */
+.fullWidth {
+  width: 100%;
+}
+
+/* Icon Spacing */
+.startIcon {
+  display: inherit;
+  margin-right: var(--space-8);
+  margin-left: calc(var(--space-4) * -1);
+}
+
+.endIcon {
+  display: inherit;
+  margin-left: var(--space-8);
+  margin-right: calc(var(--space-4) * -1);
+}
+
+.label {
+  width: 100%;
+  display: inherit;
+  align-items: inherit;
+  justify-content: inherit;
+}
\ No newline at end of file
diff --git a/app/components/inputs/Button.tsx b/app/components/inputs/Button.tsx
new file mode 100644
index 0000000..41fbb16
--- /dev/null
+++ b/app/components/inputs/Button.tsx
@@ -0,0 +1,93 @@
+'use client';
+
+import { ReactNode, ButtonHTMLAttributes } from 'react';
+import styles from './Button.module.css';
+
+export interface ButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'size'> {
+  /**
+   * The content of the button
+   */
+  children: ReactNode;
+  
+  /**
+   * The variant of the button
+   * @default "contained"
+   */
+  variant?: 'contained' | 'outlined' | 'text';
+  
+  /**
+   * The size of the button
+   * @default "medium"
+   */
+  size?: 'small' | 'medium' | 'large';
+  
+  /**
+   * The color of the button
+   * @default "primary"
+   */
+  color?: 'primary' | 'secondary' | 'error' | 'success' | 'warning';
+  
+  /**
+   * Whether the button is disabled
+   * @default false
+   */
+  disabled?: boolean;
+  
+  /**
+   * Whether the button takes full width
+   * @default false
+   */
+  fullWidth?: boolean;
+  
+  /**
+   * Icon to display at the start of the button
+   */
+  startIcon?: ReactNode;
+  
+  /**
+   * Icon to display at the end of the button
+   */
+  endIcon?: ReactNode;
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Button = ({
+  children,
+  variant = 'contained',
+  size = 'medium',
+  color = 'primary',
+  disabled = false,
+  fullWidth = false,
+  startIcon,
+  endIcon,
+  className,
+  ...props
+}: ButtonProps) => {
+  const rootClasses = [
+    styles.root,
+    styles[variant],
+    styles[size],
+    styles[color],
+    disabled && styles.disabled,
+    fullWidth && styles.fullWidth,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <button
+      className={rootClasses}
+      disabled={disabled}
+      {...props}
+    >
+      {startIcon && <span className={styles.startIcon}>{startIcon}</span>}
+      <span className={styles.label}>{children}</span>
+      {endIcon && <span className={styles.endIcon}>{endIcon}</span>}
+    </button>
+  );
+};
\ No newline at end of file
diff --git a/app/components/inputs/Checkbox.module.css b/app/components/inputs/Checkbox.module.css
new file mode 100644
index 0000000..759aca7
--- /dev/null
+++ b/app/components/inputs/Checkbox.module.css
@@ -0,0 +1,239 @@
+/* Checkbox Base Styles */
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  position: relative;
+  box-sizing: border-box;
+  background-color: transparent;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  border-radius: 50%;
+  padding: 9px;
+  cursor: pointer;
+  user-select: none;
+  vertical-align: middle;
+  text-decoration: none;
+  color: var(--text-secondary);
+  transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+}
+
+.root:hover:not(.disabled) {
+  background-color: var(--neutral-100);
+}
+
+.small {
+  padding: 5px;
+}
+
+.small .checkboxContainer {
+  width: 18px;
+  height: 18px;
+}
+
+.small .icon {
+  font-size: 18px;
+  width: 18px;
+  height: 18px;
+}
+
+/* Input */
+.input {
+  cursor: inherit;
+  position: absolute;
+  opacity: 0;
+  width: 100%;
+  height: 100%;
+  top: 0;
+  left: 0;
+  margin: 0;
+  padding: 0;
+  z-index: 1;
+}
+
+.input:focus-visible + .checkboxContainer {
+  outline: 2px solid var(--action-primary);
+  outline-offset: 2px;
+}
+
+.disabled .input {
+  cursor: default;
+}
+
+/* Checkbox Container */
+.checkboxContainer {
+  width: 24px;
+  height: 24px;
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  border: 2px solid var(--text-secondary);
+  border-radius: var(--radius-8);
+  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  position: relative;
+  background-color: transparent;
+}
+
+/* Icon */
+.icon {
+  fill: currentColor;
+  width: 1em;
+  height: 1em;
+  display: inline-block;
+  font-size: 24px;
+  transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  flex-shrink: 0;
+  user-select: none;
+}
+
+/* Color Variants - Unchecked */
+.default .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.primary .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.secondary .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.error .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.info .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.success .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+.warning .checkboxContainer {
+  border-color: var(--text-secondary);
+}
+
+/* Checked State */
+.checked.primary {
+  color: var(--action-primary);
+}
+
+.checked.primary .checkboxContainer {
+  background-color: var(--action-primary);
+  border-color: var(--action-primary);
+  color: var(--action-on-background);
+}
+
+.checked.primary:hover:not(.disabled) {
+  background-color: var(--blue-200);
+}
+
+.checked.secondary {
+  color: var(--neutral-600);
+}
+
+.checked.secondary .checkboxContainer {
+  background-color: var(--neutral-600);
+  border-color: var(--neutral-600);
+  color: var(--action-on-background);
+}
+
+.checked.error {
+  color: var(--action-destructive);
+}
+
+.checked.error .checkboxContainer {
+  background-color: var(--action-destructive);
+  border-color: var(--action-destructive);
+  color: var(--action-on-background);
+}
+
+.checked.error:hover:not(.disabled) {
+  background-color: var(--red-200);
+}
+
+.checked.info {
+  color: var(--blue-600);
+}
+
+.checked.info .checkboxContainer {
+  background-color: var(--blue-600);
+  border-color: var(--blue-600);
+  color: var(--action-on-background);
+}
+
+.checked.info:hover:not(.disabled) {
+  background-color: var(--blue-200);
+}
+
+.checked.success {
+  color: var(--green-600);
+}
+
+.checked.success .checkboxContainer {
+  background-color: var(--green-600);
+  border-color: var(--green-600);
+  color: var(--action-on-background);
+}
+
+.checked.success:hover:not(.disabled) {
+  background-color: var(--green-200);
+}
+
+.checked.warning {
+  color: var(--yellow-600);
+}
+
+.checked.warning .checkboxContainer {
+  background-color: var(--yellow-600);
+  border-color: var(--yellow-600);
+  color: var(--neutral-800);
+}
+
+.checked.warning:hover:not(.disabled) {
+  background-color: var(--yellow-200);
+}
+
+/* Disabled State */
+.disabled {
+  cursor: default;
+  color: var(--text-disabled);
+}
+
+.disabled .checkboxContainer {
+  border-color: var(--text-disabled);
+}
+
+.disabled.checked .checkboxContainer {
+  background-color: var(--text-disabled);
+  border-color: var(--text-disabled);
+  color: var(--background-primary);
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .root:hover:not(.disabled) {
+  background-color: var(--neutral-700);
+}
+
+[data-theme="dark"] .checked.primary:hover:not(.disabled) {
+  background-color: var(--blue-800);
+}
+
+[data-theme="dark"] .checked.error:hover:not(.disabled) {
+  background-color: var(--red-800);
+}
+
+[data-theme="dark"] .checked.info:hover:not(.disabled) {
+  background-color: var(--blue-800);
+}
+
+[data-theme="dark"] .checked.success:hover:not(.disabled) {
+  background-color: var(--green-800);
+}
+
+[data-theme="dark"] .checked.warning:hover:not(.disabled) {
+  background-color: var(--yellow-800);
+}
\ No newline at end of file
diff --git a/app/components/inputs/Checkbox.tsx b/app/components/inputs/Checkbox.tsx
new file mode 100644
index 0000000..14eac54
--- /dev/null
+++ b/app/components/inputs/Checkbox.tsx
@@ -0,0 +1,96 @@
+'use client';
+
+import { InputHTMLAttributes, forwardRef } from 'react';
+import styles from './Checkbox.module.css';
+
+export interface CheckboxProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
+  /**
+   * If true, the component is checked.
+   */
+  checked?: boolean;
+  
+  /**
+   * The color of the component.
+   * @default "primary"
+   */
+  color?: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';
+  
+  /**
+   * If true, the component is disabled.
+   * @default false
+   */
+  disabled?: boolean;
+  
+  /**
+   * If true, the ripple effect is disabled.
+   * @default false
+   */
+  disableRipple?: boolean;
+  
+  /**
+   * If true, the component appears indeterminate.
+   * @default false
+   */
+  indeterminate?: boolean;
+  
+  /**
+   * The size of the component.
+   * @default "medium"
+   */
+  size?: 'small' | 'medium';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+const CheckIcon = () => (
+  <svg className={styles.icon} focusable="false" viewBox="0 0 24 24">
+    <path d="M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
+  </svg>
+);
+
+const IndeterminateIcon = () => (
+  <svg className={styles.icon} focusable="false" viewBox="0 0 24 24">
+    <path d="M19 13H5v-2h14v2z"/>
+  </svg>
+);
+
+export const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(({
+  checked,
+  color = 'primary',
+  disabled = false,
+  disableRipple = false,
+  indeterminate = false,
+  size = 'medium',
+  className,
+  ...props
+}, ref) => {
+  const rootClasses = [
+    styles.root,
+    styles[size],
+    styles[color],
+    disabled && styles.disabled,
+    (checked || indeterminate) && styles.checked,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <span className={rootClasses}>
+      <input
+        ref={ref}
+        className={styles.input}
+        type="checkbox"
+        checked={checked}
+        disabled={disabled}
+        {...props}
+      />
+      <span className={styles.checkboxContainer}>
+        {indeterminate ? <IndeterminateIcon /> : checked ? <CheckIcon /> : null}
+      </span>
+    </span>
+  );
+});
\ No newline at end of file
diff --git a/app/components/inputs/IconButton.module.css b/app/components/inputs/IconButton.module.css
new file mode 100644
index 0000000..cc9cdf3
--- /dev/null
+++ b/app/components/inputs/IconButton.module.css
@@ -0,0 +1,152 @@
+/* IconButton Base Styles */
+.root {
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  position: relative;
+  box-sizing: border-box;
+  background-color: transparent;
+  outline: 0;
+  border: 0;
+  margin: 0;
+  border-radius: 50%;
+  padding: 8px;
+  cursor: pointer;
+  user-select: none;
+  vertical-align: middle;
+  text-decoration: none;
+  color: inherit;
+  font-size: 1.5rem;
+  transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  flex-shrink: 0;
+}
+
+.root:focus-visible {
+  outline: 2px solid currentColor;
+  outline-offset: 2px;
+}
+
+/* Size Variants */
+.small {
+  padding: var(--space-4);
+  font-size: 1.125rem;
+}
+
+.medium {
+  padding: var(--space-8);
+  font-size: 1.5rem;
+}
+
+.large {
+  padding: var(--space-12);
+  font-size: 1.75rem;
+}
+
+/* Color Variants */
+.default {
+  color: var(--text-secondary);
+}
+
+.default:hover:not(.disabled) {
+  background-color: var(--neutral-100);
+}
+
+.inherit {
+  color: inherit;
+}
+
+.inherit:hover:not(.disabled) {
+  background-color: rgba(0, 0, 0, 0.04);
+}
+
+.primary {
+  color: var(--action-primary);
+}
+
+.primary:hover:not(.disabled) {
+  background-color: var(--blue-200);
+}
+
+.secondary {
+  color: var(--neutral-600);
+}
+
+.secondary:hover:not(.disabled) {
+  background-color: var(--neutral-100);
+}
+
+.error {
+  color: var(--action-destructive);
+}
+
+.error:hover:not(.disabled) {
+  background-color: var(--red-200);
+}
+
+.info {
+  color: var(--blue-600);
+}
+
+.info:hover:not(.disabled) {
+  background-color: var(--blue-200);
+}
+
+.success {
+  color: var(--green-600);
+}
+
+.success:hover:not(.disabled) {
+  background-color: var(--green-200);
+}
+
+.warning {
+  color: var(--yellow-600);
+}
+
+.warning:hover:not(.disabled) {
+  background-color: var(--yellow-200);
+}
+
+/* Disabled State */
+.disabled {
+  color: var(--text-disabled);
+  cursor: default;
+  pointer-events: none;
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .default {
+  color: var(--text-secondary);
+}
+
+[data-theme="dark"] .default:hover:not(.disabled) {
+  background-color: var(--neutral-700);
+}
+
+[data-theme="dark"] .inherit:hover:not(.disabled) {
+  background-color: rgba(255, 255, 255, 0.08);
+}
+
+[data-theme="dark"] .primary:hover:not(.disabled) {
+  background-color: var(--blue-800);
+}
+
+[data-theme="dark"] .secondary:hover:not(.disabled) {
+  background-color: var(--neutral-700);
+}
+
+[data-theme="dark"] .error:hover:not(.disabled) {
+  background-color: var(--red-800);
+}
+
+[data-theme="dark"] .info:hover:not(.disabled) {
+  background-color: var(--blue-800);
+}
+
+[data-theme="dark"] .success:hover:not(.disabled) {
+  background-color: var(--green-800);
+}
+
+[data-theme="dark"] .warning:hover:not(.disabled) {
+  background-color: var(--yellow-800);
+}
\ No newline at end of file
diff --git a/app/components/inputs/IconButton.tsx b/app/components/inputs/IconButton.tsx
new file mode 100644
index 0000000..7fefdc6
--- /dev/null
+++ b/app/components/inputs/IconButton.tsx
@@ -0,0 +1,64 @@
+'use client';
+
+import { ReactNode, ButtonHTMLAttributes } from 'react';
+import styles from './IconButton.module.css';
+
+export interface IconButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'size'> {
+  /**
+   * The icon to display.
+   */
+  children: ReactNode;
+  
+  /**
+   * The color of the component.
+   * @default "default"
+   */
+  color?: 'default' | 'inherit' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';
+  
+  /**
+   * If true, the component is disabled.
+   * @default false
+   */
+  disabled?: boolean;
+  
+  /**
+   * The size of the component.
+   * @default "medium"
+   */
+  size?: 'small' | 'medium' | 'large';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const IconButton = ({
+  children,
+  color = 'default',
+  disabled = false,
+  size = 'medium',
+  className,
+  ...props
+}: IconButtonProps) => {
+  const rootClasses = [
+    styles.root,
+    styles[size],
+    styles[color],
+    disabled && styles.disabled,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <button
+      className={rootClasses}
+      disabled={disabled}
+      type="button"
+      {...props}
+    >
+      {children}
+    </button>
+  );
+};
\ No newline at end of file
diff --git a/app/components/inputs/Switch.module.css b/app/components/inputs/Switch.module.css
new file mode 100644
index 0000000..7bd5974
--- /dev/null
+++ b/app/components/inputs/Switch.module.css
@@ -0,0 +1,215 @@
+/* Switch Base Styles */
+.root {
+  display: inline-flex;
+  width: 58px;
+  height: 38px;
+  overflow: hidden;
+  padding: 12px;
+  box-sizing: border-box;
+  position: relative;
+  flex-shrink: 0;
+  z-index: 0;
+  vertical-align: middle;
+}
+
+.small {
+  width: 40px;
+  height: 24px;
+  padding: 7px;
+}
+
+/* Switch Base */
+.switchBase {
+  position: absolute;
+  top: 0;
+  left: 0;
+  z-index: 1;
+  color: var(--white);
+  transition: left 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+}
+
+/* Input */
+.input {
+  cursor: inherit;
+  position: absolute;
+  opacity: 0;
+  width: 100%;
+  height: 100%;
+  top: 0;
+  left: 0;
+  margin: 0;
+  padding: 0;
+  z-index: 1;
+}
+
+.input:focus-visible + .thumb {
+  box-shadow: 0 0 0 8px rgba(25, 118, 210, 0.16);
+}
+
+.disabled .input {
+  cursor: default;
+}
+
+/* Thumb */
+.thumb {
+  width: 20px;
+  height: 20px;
+  background-color: currentColor;
+  border-radius: 50%;
+  box-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12);
+  transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+}
+
+.small .thumb {
+  width: 16px;
+  height: 16px;
+}
+
+/* Track */
+.track {
+  height: 100%;
+  width: 100%;
+  border-radius: 14px;
+  z-index: -1;
+  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  background-color: var(--neutral-800);
+  opacity: 0.38;
+}
+
+.small .track {
+  border-radius: 10px;
+}
+
+/* Color Variants - Unchecked State */
+.default .switchBase {
+  color: var(--white);
+}
+
+.primary .switchBase {
+  color: var(--white);
+}
+
+.secondary .switchBase {
+  color: var(--white);
+}
+
+.error .switchBase {
+  color: var(--white);
+}
+
+.info .switchBase {
+  color: var(--white);
+}
+
+.success .switchBase {
+  color: var(--white);
+}
+
+.warning .switchBase {
+  color: var(--white);
+}
+
+/* Checked State */
+.checked .switchBase {
+  transform: translateX(20px);
+}
+
+.small.checked .switchBase {
+  transform: translateX(16px);
+}
+
+.checked.primary .switchBase {
+  color: var(--action-primary);
+}
+
+.checked.primary .track {
+  background-color: var(--action-primary);
+  opacity: 0.5;
+}
+
+.checked.secondary .switchBase {
+  color: var(--neutral-600);
+}
+
+.checked.secondary .track {
+  background-color: var(--neutral-600);
+  opacity: 0.5;
+}
+
+.checked.error .switchBase {
+  color: var(--action-destructive);
+}
+
+.checked.error .track {
+  background-color: var(--action-destructive);
+  opacity: 0.5;
+}
+
+.checked.info .switchBase {
+  color: var(--blue-600);
+}
+
+.checked.info .track {
+  background-color: var(--blue-600);
+  opacity: 0.5;
+}
+
+.checked.success .switchBase {
+  color: var(--green-600);
+}
+
+.checked.success .track {
+  background-color: var(--green-600);
+  opacity: 0.5;
+}
+
+.checked.warning .switchBase {
+  color: var(--yellow-600);
+}
+
+.checked.warning .track {
+  background-color: var(--yellow-600);
+  opacity: 0.5;
+}
+
+/* Disabled State */
+.disabled .switchBase {
+  color: var(--neutral-100);
+}
+
+.disabled .track {
+  background-color: var(--neutral-800);
+  opacity: 0.12;
+}
+
+.disabled.checked .switchBase {
+  color: var(--neutral-400);
+}
+
+.disabled.checked .track {
+  background-color: var(--neutral-800);
+  opacity: 0.12;
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .track {
+  background-color: var(--white);
+}
+
+[data-theme="dark"] .disabled .switchBase {
+  color: var(--neutral-800);
+}
+
+[data-theme="dark"] .disabled .track {
+  background-color: var(--white);
+  opacity: 0.1;
+}
+
+[data-theme="dark"] .disabled.checked .switchBase {
+  color: var(--neutral-600);
+}
+
+[data-theme="dark"] .disabled.checked .track {
+  background-color: var(--white);
+  opacity: 0.1;
+}
\ No newline at end of file
diff --git a/app/components/inputs/Switch.tsx b/app/components/inputs/Switch.tsx
new file mode 100644
index 0000000..df39025
--- /dev/null
+++ b/app/components/inputs/Switch.tsx
@@ -0,0 +1,72 @@
+'use client';
+
+import { InputHTMLAttributes, forwardRef } from 'react';
+import styles from './Switch.module.css';
+
+export interface SwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
+  /**
+   * If true, the component is checked.
+   */
+  checked?: boolean;
+  
+  /**
+   * The color of the component.
+   * @default "primary"
+   */
+  color?: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';
+  
+  /**
+   * If true, the component is disabled.
+   * @default false
+   */
+  disabled?: boolean;
+  
+  /**
+   * The size of the component.
+   * @default "medium"
+   */
+  size?: 'small' | 'medium';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Switch = forwardRef<HTMLInputElement, SwitchProps>(({
+  checked,
+  color = 'primary',
+  disabled = false,
+  size = 'medium',
+  className,
+  ...props
+}, ref) => {
+  const rootClasses = [
+    styles.root,
+    styles[size],
+    styles[color],
+    disabled && styles.disabled,
+    checked && styles.checked,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <span className={rootClasses}>
+      <span className={styles.switchBase}>
+        <input
+          ref={ref}
+          className={styles.input}
+          type="checkbox"
+          role="switch"
+          checked={checked}
+          disabled={disabled}
+          {...props}
+        />
+        <span className={styles.thumb} />
+      </span>
+      <span className={styles.track} />
+    </span>
+  );
+});
\ No newline at end of file
diff --git a/app/components/inputs/TextField.module.css b/app/components/inputs/TextField.module.css
new file mode 100644
index 0000000..6c76d70
--- /dev/null
+++ b/app/components/inputs/TextField.module.css
@@ -0,0 +1,270 @@
+/* TextField Base Styles */
+.root {
+  display: inline-flex;
+  flex-direction: column;
+  position: relative;
+  min-width: 0;
+  padding: 0;
+  margin: 0;
+  border: 0;
+  vertical-align: top;
+}
+
+.fullWidth {
+  width: 100%;
+}
+
+/* Label */
+.label {
+  font-family: var(--font-primary);
+  font-size: var(--font-size-input-label);
+  line-height: var(--line-height-input-label);
+  font-weight: var(--font-weight-medium);
+  color: var(--text-primary);
+  margin-bottom: var(--space-8);
+  display: block;
+  transform-origin: top left;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  max-width: calc(133% - 32px);
+}
+
+.asterisk {
+  color: var(--action-destructive);
+}
+
+.error .label {
+  color: var(--action-destructive);
+}
+
+.disabled .label {
+  color: var(--text-disabled);
+}
+
+/* Input Container */
+.inputContainer {
+  position: relative;
+  display: inline-flex;
+  align-items: center;
+  cursor: text;
+  font-family: var(--font-primary);
+  font-size: var(--font-size-input-text);
+  line-height: var(--line-height-input-text);
+  font-weight: var(--font-weight-regular);
+  letter-spacing: 0.00938em;
+}
+
+/* Input Base */
+.input {
+  font: inherit;
+  letter-spacing: inherit;
+  color: currentColor;
+  border: 0;
+  box-sizing: content-box;
+  background: none;
+  height: 1.4375em;
+  margin: 0;
+  display: block;
+  min-width: 0;
+  width: 100%;
+  animation-name: mui-auto-fill-cancel;
+  animation-duration: 10ms;
+  padding: 0;
+}
+
+.input:focus {
+  outline: 0;
+}
+
+.input:invalid {
+  box-shadow: none;
+}
+
+.input::-webkit-search-decoration {
+  -webkit-appearance: none;
+}
+
+.input::placeholder {
+  color: var(--text-disabled);
+  opacity: 1;
+}
+
+.input:disabled {
+  opacity: 1;
+  -webkit-text-fill-color: var(--text-disabled);
+}
+
+/* Size Variants */
+.small .inputContainer {
+  padding: var(--space-8) var(--space-12);
+}
+
+.medium .inputContainer {
+  padding: var(--space-12) var(--space-16);
+}
+
+/* Outlined Variant */
+.outlined .inputContainer {
+  border: 1px solid var(--border-divider);
+  border-radius: var(--radius-8);
+  background-color: var(--background-primary);
+  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
+}
+
+.outlined .inputContainer:hover:not(.disabled) {
+  border-color: var(--text-primary);
+}
+
+.outlined .inputContainer:focus-within {
+  border-color: var(--action-primary);
+  box-shadow: 0 0 0 1px var(--action-primary);
+}
+
+.outlined.error .inputContainer {
+  border-color: var(--action-destructive);
+}
+
+.outlined.error .inputContainer:focus-within {
+  border-color: var(--action-destructive);
+  box-shadow: 0 0 0 1px var(--action-destructive);
+}
+
+.outlined.disabled .inputContainer {
+  border-color: var(--border-divider);
+  background-color: var(--background-secondary);
+}
+
+/* Filled Variant */
+.filled .inputContainer {
+  background-color: var(--background-secondary);
+  border-top-left-radius: var(--radius-8);
+  border-top-right-radius: var(--radius-8);
+  border-bottom: 2px solid var(--border-divider);
+  transition: background-color 0.2s ease-in-out, border-bottom-color 0.2s ease-in-out;
+}
+
+.filled .inputContainer:hover:not(.disabled) {
+  background-color: var(--background-tertiary);
+}
+
+.filled .inputContainer:focus-within {
+  border-bottom-color: var(--action-primary);
+}
+
+.filled.error .inputContainer {
+  border-bottom-color: var(--action-destructive);
+}
+
+.filled.error .inputContainer:focus-within {
+  border-bottom-color: var(--action-destructive);
+}
+
+.filled.disabled .inputContainer {
+  background-color: var(--background-secondary);
+  border-bottom-color: var(--border-divider);
+}
+
+/* Standard Variant */
+.standard .inputContainer {
+  border: none;
+  border-bottom: 1px solid var(--border-divider);
+  border-radius: 0;
+  padding-left: 0;
+  padding-right: 0;
+  transition: border-bottom-color 0.2s ease-in-out;
+}
+
+.standard .inputContainer:hover:not(.disabled) {
+  border-bottom-color: var(--text-primary);
+}
+
+.standard .inputContainer:focus-within {
+  border-bottom-color: var(--action-primary);
+  border-bottom-width: 2px;
+}
+
+.standard.error .inputContainer {
+  border-bottom-color: var(--action-destructive);
+}
+
+.standard.error .inputContainer:focus-within {
+  border-bottom-color: var(--action-destructive);
+  border-bottom-width: 2px;
+}
+
+.standard.disabled .inputContainer {
+  border-bottom-color: var(--border-divider);
+  border-bottom-style: dotted;
+}
+
+/* Adornments */
+.startAdornment {
+  display: flex;
+  height: 0.01em;
+  max-height: 2em;
+  align-items: center;
+  white-space: nowrap;
+  color: var(--text-secondary);
+  margin-right: var(--space-8);
+}
+
+.endAdornment {
+  display: flex;
+  height: 0.01em;
+  max-height: 2em;
+  align-items: center;
+  white-space: nowrap;
+  color: var(--text-secondary);
+  margin-left: var(--space-8);
+}
+
+.hasStartAdornment {
+  padding-left: 0;
+}
+
+.hasEndAdornment {
+  padding-right: 0;
+}
+
+/* Helper Text */
+.helperText {
+  font-family: var(--font-primary);
+  font-size: var(--font-size-helper-text);
+  line-height: var(--line-height-helper-text);
+  font-weight: var(--font-weight-regular);
+  color: var(--text-secondary);
+  margin-top: var(--space-4);
+  text-align: left;
+  margin-left: var(--space-12);
+  margin-right: var(--space-12);
+}
+
+.error .helperText {
+  color: var(--action-destructive);
+}
+
+.disabled .helperText {
+  color: var(--text-disabled);
+}
+
+/* Disabled State */
+.disabled .inputContainer {
+  cursor: default;
+}
+
+.disabled .input {
+  color: var(--text-disabled);
+}
+
+.disabled .startAdornment,
+.disabled .endAdornment {
+  color: var(--text-disabled);
+}
+
+/* Auto-fill animation reset */
+@keyframes mui-auto-fill-cancel {
+  from {
+    display: block;
+  }
+}
\ No newline at end of file
diff --git a/app/components/inputs/TextField.tsx b/app/components/inputs/TextField.tsx
new file mode 100644
index 0000000..0668e8a
--- /dev/null
+++ b/app/components/inputs/TextField.tsx
@@ -0,0 +1,149 @@
+'use client';
+
+import { InputHTMLAttributes, ReactNode, forwardRef } from 'react';
+import styles from './TextField.module.css';
+
+export interface TextFieldProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
+  /**
+   * The label content
+   */
+  label?: string;
+  
+  /**
+   * The variant of the text field
+   * @default "outlined"
+   */
+  variant?: 'outlined' | 'filled' | 'standard';
+  
+  /**
+   * The size of the text field
+   * @default "medium"
+   */
+  size?: 'small' | 'medium';
+  
+  /**
+   * Helper text to display below the input
+   */
+  helperText?: string;
+  
+  /**
+   * If true, the input will indicate an error
+   * @default false
+   */
+  error?: boolean;
+  
+  /**
+   * Whether the input is disabled
+   * @default false
+   */
+  disabled?: boolean;
+  
+  /**
+   * Whether the input is required
+   * @default false
+   */
+  required?: boolean;
+  
+  /**
+   * Whether the input takes full width
+   * @default false
+   */
+  fullWidth?: boolean;
+  
+  /**
+   * Icon to display at the start of the input
+   */
+  startAdornment?: ReactNode;
+  
+  /**
+   * Icon to display at the end of the input
+   */
+  endAdornment?: ReactNode;
+  
+  /**
+   * The type of input
+   * @default "text"
+   */
+  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const TextField = forwardRef<HTMLInputElement, TextFieldProps>(({
+  label,
+  variant = 'outlined',
+  size = 'medium',
+  helperText,
+  error = false,
+  disabled = false,
+  required = false,
+  fullWidth = false,
+  startAdornment,
+  endAdornment,
+  type = 'text',
+  className,
+  id,
+  ...props
+}, ref) => {
+  const inputId = id || `textfield-${Math.random().toString(36).substr(2, 9)}`;
+  
+  const rootClasses = [
+    styles.root,
+    styles[variant],
+    styles[size],
+    error && styles.error,
+    disabled && styles.disabled,
+    fullWidth && styles.fullWidth,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  const inputClasses = [
+    styles.input,
+    startAdornment && styles.hasStartAdornment,
+    endAdornment && styles.hasEndAdornment,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <div className={rootClasses}>
+      {label && (
+        <label htmlFor={inputId} className={styles.label}>
+          {label}
+          {required && <span className={styles.asterisk}>*</span>}
+        </label>
+      )}
+      
+      <div className={styles.inputContainer}>
+        {startAdornment && (
+          <div className={styles.startAdornment}>{startAdornment}</div>
+        )}
+        
+        <input
+          ref={ref}
+          id={inputId}
+          type={type}
+          className={inputClasses}
+          disabled={disabled}
+          required={required}
+          {...props}
+        />
+        
+        {endAdornment && (
+          <div className={styles.endAdornment}>{endAdornment}</div>
+        )}
+      </div>
+      
+      {helperText && (
+        <div className={styles.helperText}>
+          {helperText}
+        </div>
+      )}
+    </div>
+  );
+});
\ No newline at end of file
diff --git a/app/components/layout/Card.module.css b/app/components/layout/Card.module.css
new file mode 100644
index 0000000..da91bb8
--- /dev/null
+++ b/app/components/layout/Card.module.css
@@ -0,0 +1,158 @@
+/* Card Base Styles */
+.root {
+  background-color: var(--background-primary);
+  color: var(--text-primary);
+  transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
+  border-radius: var(--radius-12);
+  overflow: hidden;
+}
+
+/* Elevation Variants */
+.elevation0 {
+  box-shadow: none;
+}
+
+.elevation1 {
+  box-shadow: 
+    0px 2px 1px -1px rgba(0,0,0,0.2),
+    0px 1px 1px 0px rgba(0,0,0,0.14),
+    0px 1px 3px 0px rgba(0,0,0,0.12);
+}
+
+.elevation2 {
+  box-shadow: 
+    0px 3px 1px -2px rgba(0,0,0,0.2),
+    0px 2px 2px 0px rgba(0,0,0,0.14),
+    0px 1px 5px 0px rgba(0,0,0,0.12);
+}
+
+.elevation3 {
+  box-shadow: 
+    0px 3px 3px -2px rgba(0,0,0,0.2),
+    0px 3px 4px 0px rgba(0,0,0,0.14),
+    0px 1px 8px 0px rgba(0,0,0,0.12);
+}
+
+.elevation4 {
+  box-shadow: 
+    0px 2px 4px -1px rgba(0,0,0,0.2),
+    0px 4px 5px 0px rgba(0,0,0,0.14),
+    0px 1px 10px 0px rgba(0,0,0,0.12);
+}
+
+.elevation8 {
+  box-shadow: 
+    0px 5px 5px -3px rgba(0,0,0,0.2),
+    0px 8px 10px 1px rgba(0,0,0,0.14),
+    0px 3px 14px 2px rgba(0,0,0,0.12);
+}
+
+.elevation12 {
+  box-shadow: 
+    0px 7px 8px -4px rgba(0,0,0,0.2),
+    0px 12px 17px 2px rgba(0,0,0,0.14),
+    0px 5px 22px 4px rgba(0,0,0,0.12);
+}
+
+.elevation16 {
+  box-shadow: 
+    0px 8px 10px -5px rgba(0,0,0,0.2),
+    0px 16px 24px 2px rgba(0,0,0,0.14),
+    0px 6px 30px 5px rgba(0,0,0,0.12);
+}
+
+.elevation24 {
+  box-shadow: 
+    0px 11px 15px -7px rgba(0,0,0,0.2),
+    0px 24px 38px 3px rgba(0,0,0,0.14),
+    0px 9px 46px 8px rgba(0,0,0,0.12);
+}
+
+/* Outlined Variant */
+.outlined {
+  border: 1px solid var(--border-divider);
+  box-shadow: none;
+}
+
+/* Dark Theme Adjustments */
+[data-theme="dark"] .root {
+  background-color: var(--background-primary);
+}
+
+[data-theme="dark"] .outlined {
+  border-color: var(--border-divider);
+}
+
+/* Card Content */
+.content {
+  padding: var(--space-16);
+}
+
+.content:last-child {
+  padding-bottom: var(--space-24);
+}
+
+/* Card Header */
+.header {
+  display: flex;
+  align-items: center;
+  padding: var(--space-16);
+  padding-bottom: 0;
+}
+
+.avatar {
+  flex: 0 0 auto;
+  margin-right: var(--space-16);
+}
+
+.headerContent {
+  flex: 1 1 auto;
+  overflow: hidden;
+}
+
+.title {
+  font-family: var(--font-primary);
+  font-size: var(--font-size-h5);
+  line-height: var(--line-height-h5);
+  font-weight: var(--font-weight-semibold);
+  color: var(--text-primary);
+  margin: 0;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+}
+
+.subheader {
+  font-family: var(--font-primary);
+  font-size: var(--font-size-body2);
+  line-height: var(--line-height-body2);
+  font-weight: var(--font-weight-regular);
+  color: var(--text-secondary);
+  margin: 0;
+  margin-top: var(--space-4);
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+}
+
+.action {
+  flex: 0 0 auto;
+  align-self: flex-start;
+  margin-top: calc(var(--space-4) * -1);
+  margin-right: calc(var(--space-8) * -1);
+}
+
+/* Card Actions */
+.actions {
+  display: flex;
+  align-items: center;
+  padding: var(--space-8);
+}
+
+.actions.spacing > :not(:first-child) {
+  margin-left: var(--space-8);
+}
+
+.actions:last-child {
+  padding-bottom: var(--space-16);
+}
\ No newline at end of file
diff --git a/app/components/layout/Card.tsx b/app/components/layout/Card.tsx
new file mode 100644
index 0000000..84b1ae1
--- /dev/null
+++ b/app/components/layout/Card.tsx
@@ -0,0 +1,166 @@
+'use client';
+
+import { ReactNode, HTMLAttributes } from 'react';
+import styles from './Card.module.css';
+
+export interface CardProps extends HTMLAttributes<HTMLDivElement> {
+  /**
+   * The content of the card
+   */
+  children: ReactNode;
+  
+  /**
+   * The elevation depth of the card
+   * @default 1
+   */
+  elevation?: 0 | 1 | 2 | 3 | 4 | 8 | 12 | 16 | 24;
+  
+  /**
+   * The variant of the card
+   * @default "elevation"
+   */
+  variant?: 'elevation' | 'outlined';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Card = ({
+  children,
+  elevation = 1,
+  variant = 'elevation',
+  className,
+  ...props
+}: CardProps) => {
+  const rootClasses = [
+    styles.root,
+    variant === 'elevation' ? styles[`elevation${elevation}`] : styles.outlined,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <div className={rootClasses} {...props}>
+      {children}
+    </div>
+  );
+};
+
+export interface CardContentProps extends HTMLAttributes<HTMLDivElement> {
+  /**
+   * The content of the card content area
+   */
+  children: ReactNode;
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const CardContent = ({
+  children,
+  className,
+  ...props
+}: CardContentProps) => {
+  const rootClasses = [styles.content, className].filter(Boolean).join(' ');
+
+  return (
+    <div className={rootClasses} {...props}>
+      {children}
+    </div>
+  );
+};
+
+export interface CardHeaderProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {
+  /**
+   * The title of the card
+   */
+  title?: ReactNode;
+  
+  /**
+   * The subtitle of the card
+   */
+  subheader?: ReactNode;
+  
+  /**
+   * Avatar element to display in the header
+   */
+  avatar?: ReactNode;
+  
+  /**
+   * Action element to display in the header
+   */
+  action?: ReactNode;
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const CardHeader = ({
+  title,
+  subheader,
+  avatar,
+  action,
+  className,
+  ...props
+}: CardHeaderProps) => {
+  const rootClasses = [styles.header, className].filter(Boolean).join(' ');
+
+  return (
+    <div className={rootClasses} {...props}>
+      {avatar && <div className={styles.avatar}>{avatar}</div>}
+      
+      <div className={styles.headerContent}>
+        {title && <div className={styles.title}>{title}</div>}
+        {subheader && <div className={styles.subheader}>{subheader}</div>}
+      </div>
+      
+      {action && <div className={styles.action}>{action}</div>}
+    </div>
+  );
+};
+
+export interface CardActionsProps extends HTMLAttributes<HTMLDivElement> {
+  /**
+   * The content of the card actions area
+   */
+  children: ReactNode;
+  
+  /**
+   * If true, the actions are aligned to the right
+   * @default false
+   */
+  disableSpacing?: boolean;
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const CardActions = ({
+  children,
+  disableSpacing = false,
+  className,
+  ...props
+}: CardActionsProps) => {
+  const rootClasses = [
+    styles.actions,
+    !disableSpacing && styles.spacing,
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <div className={rootClasses} {...props}>
+      {children}
+    </div>
+  );
+};
\ No newline at end of file
diff --git a/app/components/layout/Divider.module.css b/app/components/layout/Divider.module.css
new file mode 100644
index 0000000..6dfd7c6
--- /dev/null
+++ b/app/components/layout/Divider.module.css
@@ -0,0 +1,128 @@
+/* Divider Base Styles */
+.root {
+  margin: 0;
+  flex-shrink: 0;
+  border-width: 0;
+  border-style: solid;
+  border-color: var(--border-divider);
+  border-bottom-width: thin;
+}
+
+/* Orientation */
+.horizontal {
+  border-bottom-width: 1px;
+  width: 100%;
+}
+
+.vertical {
+  border-right-width: 1px;
+  border-bottom-width: 0;
+  height: 100%;
+  width: 0;
+}
+
+/* Flex Item */
+.flexItem {
+  align-self: stretch;
+  height: auto;
+}
+
+/* Light */
+.light {
+  border-color: rgba(0, 0, 0, 0.08);
+}
+
+/* Variants */
+.fullWidth {
+  width: 100%;
+}
+
+.inset {
+  margin-left: 72px;
+}
+
+.middle {
+  margin-left: var(--space-16);
+  margin-right: var(--space-16);
+}
+
+.middle.vertical {
+  margin-left: 0;
+  margin-right: 0;
+  margin-top: var(--space-8);
+  margin-bottom: var(--space-8);
+}
+
+/* Absolute */
+.absolute {
+  position: absolute;
+  bottom: 0;
+  left: 0;
+  width: 100%;
+}
+
+/* With Children */
+.withChildren {
+  display: flex;
+  white-space: nowrap;
+  text-align: center;
+  border: 0;
+  font-family: var(--font-primary);
+  font-weight: var(--font-weight-regular);
+  font-size: var(--font-size-body2);
+  line-height: var(--line-height-body2);
+  color: var(--text-secondary);
+}
+
+.withChildren::before,
+.withChildren::after {
+  position: relative;
+  width: 100%;
+  border-top: thin solid var(--border-divider);
+  top: 50%;
+  content: '';
+  transform: translateY(50%);
+}
+
+/* Text Alignment */
+.center::before,
+.center::after {
+  width: 100%;
+}
+
+.left::before {
+  width: 5%;
+}
+
+.left::after {
+  width: 95%;
+}
+
+.right::before {
+  width: 95%;
+}
+
+.right::after {
+  width: 5%;
+}
+
+/* Wrapper */
+.wrapper {
+  display: inline-block;
+  padding-left: calc(var(--space-8) * 1.2);
+  padding-right: calc(var(--space-8) * 1.2);
+}
+
+/* Dark theme adjustments */
+[data-theme="dark"] .root {
+  border-color: var(--border-divider);
+}
+
+[data-theme="dark"] .light {
+  border-color: rgba(255, 255, 255, 0.08);
+}
+
+[data-theme="dark"] .withChildren::before,
+[data-theme="dark"] .withChildren::after {
+  border-top-color: var(--border-divider);
+}
\ No newline at end of file
diff --git a/app/components/layout/Divider.tsx b/app/components/layout/Divider.tsx
new file mode 100644
index 0000000..12d0f0d
--- /dev/null
+++ b/app/components/layout/Divider.tsx
@@ -0,0 +1,84 @@
+'use client';
+
+import { ReactNode, HTMLAttributes } from 'react';
+import styles from './Divider.module.css';
+
+export interface DividerProps extends HTMLAttributes<HTMLHRElement> {
+  /**
+   * Absolutely position the element.
+   * @default false
+   */
+  absolute?: boolean;
+  
+  /**
+   * The content of the component.
+   */
+  children?: ReactNode;
+  
+  /**
+   * If true, a vertical divider will have the correct height when used in flex container.
+   * @default false
+   */
+  flexItem?: boolean;
+  
+  /**
+   * If true, the divider will have a lighter color.
+   * @default false
+   */
+  light?: boolean;
+  
+  /**
+   * The divider orientation.
+   * @default "horizontal"
+   */
+  orientation?: 'horizontal' | 'vertical';
+  
+  /**
+   * The text alignment.
+   * @default "center"
+   */
+  textAlign?: 'center' | 'left' | 'right';
+  
+  /**
+   * The variant to use.
+   * @default "fullWidth"
+   */
+  variant?: 'fullWidth' | 'inset' | 'middle';
+  
+  /**
+   * Additional CSS class name
+   */
+  className?: string;
+}
+
+export const Divider = ({
+  absolute = false,
+  children,
+  flexItem = false,
+  light = false,
+  orientation = 'horizontal',
+  textAlign = 'center',
+  variant = 'fullWidth',
+  className,
+  ...props
+}: DividerProps) => {
+  const rootClasses = [
+    styles.root,
+    styles[orientation],
+    styles[variant],
+    absolute && styles.absolute,
+    flexItem && styles.flexItem,
+    light && styles.light,
+    children && styles.withChildren,
+    children && styles[textAlign],
+    className,
+  ]
+    .filter(Boolean)
+    .join(' ');
+
+  return (
+    <hr className={rootClasses} {...props}>
+      {children && <span className={styles.wrapper}>{children}</span>}
+    </hr>
+  );
+};
\ No newline at end of file
diff --git a/app/components/navigation/SideNav.tsx b/app/components/navigation/SideNav.tsx
index 35d1320..38a8cff 100644
--- a/app/components/navigation/SideNav.tsx
+++ b/app/components/navigation/SideNav.tsx
@@ -22,7 +22,33 @@ const navigation: NavSection[] = [
   {
     title: 'Inputs',
     items: [
+      { title: 'Button', href: '/inputs/button' },
+      { title: 'Checkbox', href: '/inputs/checkbox' },
       { title: 'Interactive Chip', href: '/inputs/chip' },
+      { title: 'Icon Button', href: '/inputs/icon-button' },
+      { title: 'Switch', href: '/inputs/switch' },
+      { title: 'Text Field', href: '/inputs/text-field' },
+    ]
+  },
+  {
+    title: 'Display',
+    items: [
+      { title: 'Avatar', href: '/display/avatar' },
+      { title: 'Badge', href: '/display/badge' },
+      { title: 'Typography', href: '/display/typography' },
+    ]
+  },
+  {
+    title: 'Feedback',
+    items: [
+      { title: 'Alert', href: '/feedback/alert' },
+    ]
+  },
+  {
+    title: 'Layout',
+    items: [
+      { title: 'Card', href: '/layout/card' },
+      { title: 'Divider', href: '/layout/divider' },
     ]
   }
 ]
diff --git a/app/inputs/button/page.module.css b/app/inputs/button/page.module.css
new file mode 100644
index 0000000..43328d1
--- /dev/null
+++ b/app/inputs/button/page.module.css
@@ -0,0 +1,24 @@
+.container {
+  padding: var(--space-24);
+  max-width: 1200px;
+}
+
+.title {
+  margin-bottom: var(--space-16);
+}
+
+.description {
+  margin-bottom: var(--space-32);
+  color: var(--text-secondary);
+}
+
+.demoCard {
+  margin-bottom: var(--space-24);
+}
+
+.buttonGroup {
+  display: flex;
+  flex-wrap: wrap;
+  gap: var(--space-16);
+  align-items: center;
+}
\ No newline at end of file
diff --git a/app/inputs/button/page.tsx b/app/inputs/button/page.tsx
new file mode 100644
index 0000000..d133632
--- /dev/null
+++ b/app/inputs/button/page.tsx
@@ -0,0 +1,107 @@
+'use client';
+
+import { Button } from '../../components/inputs/Button';
+import { Typography } from '../../components/display/Typography';
+import { Card, CardContent, CardHeader } from '../../components/layout/Card';
+import { Divider } from '../../components/layout/Divider';
+import styles from './page.module.css';
+
+const PlayIcon = () => (
+  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+    <path d="M8 5v10l8-5-8-5z" fill="currentColor"/>
+  </svg>
+);
+
+const DeleteIcon = () => (
+  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
+    <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" fill="currentColor"/>
+  </svg>
+);
+
+export default function ButtonPage() {
+  return (
+    <div className={styles.container}>
+      <Typography variant="h3" component="h1" className={styles.title}>
+        Button
+      </Typography>
+      
+      <Typography variant="body1" className={styles.description}>
+        Buttons allow users to take actions, and make choices, with a single tap.
+      </Typography>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="Contained Buttons" />
+        <CardContent>
+          <div className={styles.buttonGroup}>
+            <Button variant="contained" color="primary">Primary</Button>
+            <Button variant="contained" color="secondary">Secondary</Button>
+            <Button variant="contained" color="success">Success</Button>
+            <Button variant="contained" color="error">Error</Button>
+            <Button variant="contained" color="warning">Warning</Button>
+            <Button variant="contained" disabled>Disabled</Button>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="Outlined Buttons" />
+        <CardContent>
+          <div className={styles.buttonGroup}>
+            <Button variant="outlined" color="primary">Primary</Button>
+            <Button variant="outlined" color="secondary">Secondary</Button>
+            <Button variant="outlined" color="success">Success</Button>
+            <Button variant="outlined" color="error">Error</Button>
+            <Button variant="outlined" color="warning">Warning</Button>
+            <Button variant="outlined" disabled>Disabled</Button>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="Text Buttons" />
+        <CardContent>
+          <div className={styles.buttonGroup}>
+            <Button variant="text" color="primary">Primary</Button>
+            <Button variant="text" color="secondary">Secondary</Button>
+            <Button variant="text" color="success">Success</Button>
+            <Button variant="text" color="error">Error</Button>
+            <Button variant="text" color="warning">Warning</Button>
+            <Button variant="text" disabled>Disabled</Button>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="Sizes" />
+        <CardContent>
+          <div className={styles.buttonGroup}>
+            <Button size="small">Small</Button>
+            <Button size="medium">Medium</Button>
+            <Button size="large">Large</Button>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="With Icons" />
+        <CardContent>
+          <div className={styles.buttonGroup}>
+            <Button startIcon={<PlayIcon />}>Play</Button>
+            <Button endIcon={<DeleteIcon />} color="error">Delete</Button>
+            <Button variant="outlined" startIcon={<PlayIcon />}>Play</Button>
+            <Button variant="text" endIcon={<DeleteIcon />}>Delete</Button>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Card className={styles.demoCard}>
+        <CardHeader title="Full Width" />
+        <CardContent>
+          <Button fullWidth color="primary">
+            Full Width Button
+          </Button>
+        </CardContent>
+      </Card>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/app/page.tsx b/app/page.tsx
index e7c9a09..cfd2ad3 100644
--- a/app/page.tsx
+++ b/app/page.tsx
@@ -1,5 +1,8 @@
-import { redirect } from 'next/navigation'
-
 export default function Home() {
-  redirect('/theme')
+  return (
+    <div style={{ padding: '20px' }}>
+      <h1>Design System</h1>
+      <p>Welcome to the design system!</p>
+    </div>
+  )
 } 
\ No newline at end of file
diff --git a/package.json b/package.json
index 8689312..5c7e7fd 100644
--- a/package.json
+++ b/package.json
@@ -3,7 +3,7 @@
   "version": "0.1.0",
   "private": true,
   "scripts": {
-    "dev": "next dev",
+    "dev": "next dev --hostname 0.0.0.0",
     "build": "next build",
     "start": "next start",
     "lint": "next lint"
-- 
2.39.5 (Apple Git-154)

